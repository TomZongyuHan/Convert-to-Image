Index: methods/imageAugumentation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Import library and methods\nimport unittest\nfrom PIL import Image, ImageEnhance\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport cv2\n\n# Enhance the image dataset\n# Input:\n#   imageDataset: the variable of datasets after dimensionality reduce\n# Output:\n#   enhancedDataset: the list of test set and train set\ndef imageAugumentation(imageDataset):\n    # Implement and run image enhance method\n    augmentedDataset = []\n    img = imageDataset[0]\n    height, width, _ = img.shape\n    # op = np.random.randint(1, 6)\n    op = 3\n    # crop\n    if(op == 1):\n        img = crop(img, 1512, 2016)\n    # random flip\n    if(op == 2):\n        img = random_flip(img)\n    # zoom\n    if (op == 3):\n        img = zoom(img, 1512, 2016, 2)\n    # gauss_noise\n    if (op == 4):\n        img = gasuss_noise(img, 0, 0.005)\n    # adjust contrast\n    if (op == 5):\n        img = adjust_contrast(img)\n\n    img = Image.fromarray(img)\n    augmentedDataset.append(img)\n    return augmentedDataset\n\ndef crop(npImage, height_range, width_range): #1512, 2016\n    # img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    height, width, _ = npImage.shape\n    new_height = np.random.randint(0, height - height_range)\n    new_width = np.random.randint(0, width - width_range)\n    npImage = npImage[new_height: new_height + height_range, new_width: new_width + width_range, :]\n    return npImage\n\ndef zoom(npImage, height_range, width_range, magnification):\n    height, width, _ = npImage.shape\n    # npImage = cv2.resize(npImage, (int(height * 1.5), int(width * 1.5)))\n    npImage = npImage[int((height - height_range) / magnification): int((height + height_range) / magnification),\n          int((width - width_range) / magnification): int((width + width_range) / magnification), :]\n    return npImage\n\ndef random_flip(npImage):\n    flip_op = np.random.randint(1, 4)\n    # flip vertical\n    if(flip_op == 1):\n        npImage = np.flip(npImage)\n    # flip horizontal\n    if(flip_op == 2):\n        npImage = np.fliplr(npImage)\n    # rotate 90 degree\n    if(flip_op == 3):\n        npImage = np.rot90(npImage)\n    return npImage\n\ndef gasuss_noise(npImage, mean = 0, var = 0.005):\n    # nomorlized the pixel value\n    npImage = np.array(npImage / 255, dtype = float)\n    # create a gasuss matrix\n    noise = np.random.normal(mean, var ** 0.5, npImage.shape)\n    # combine the image matrix with the gasuss matrix\n    out = npImage + noise\n    # Restores to the original pixel value\n    out = np.uint8(out * 255)\n    return out\n\ndef adjust_contrast(npImage):\n    random_contrast_factor = np.random.randint(10, 31) / 10\n    npImage = Image.fromarray(npImage)\n    npImage = ImageEnhance.Contrast(npImage).enhance(random_contrast_factor)\n    npImage = np.array(npImage)\n    return npImage\n\n# Test\nimagePath = '../originalDatasets/' + 'testImage.jpg'\nimg = Image.open(imagePath)\nimg = np.array(img)\nimageDataset = []\nimageDataset.append(img)\naugmented_dataset = imageAugumentation(imageDataset)\nplt.imshow(augmented_dataset[0])\nplt.show()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- methods/imageAugumentation.py	(revision 3b624f528f26eb499d9783beaf032e6bc4d42cb9)
+++ methods/imageAugumentation.py	(date 1631179666890)
@@ -15,8 +15,7 @@
     augmentedDataset = []
     img = imageDataset[0]
     height, width, _ = img.shape
-    # op = np.random.randint(1, 6)
-    op = 3
+    op = np.random.randint(1, 6)
     # crop
     if(op == 1):
         img = crop(img, 1512, 2016)
